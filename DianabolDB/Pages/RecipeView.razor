@page "/recipes"

@inject IDianabolService DianabolService
@inject NotificationService NotificationService

@if (!ShowEdit)
{
    <RadzenDataGrid AllowFiltering="true"
                    AllowColumnResize="true"
                    AllowAlternatingRows="false"
                    FilterMode="FilterMode.Advanced"
                    AllowSorting="true" PageSize="5"
                    AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    Data="@Recipes"
                    TItem="Meal"
                    LogicalFilterOperator="LogicalFilterOperator.Or"
                    Style="max-height:80vh;overflow:auto"
                    ExpandMode="DataGridExpandMode.Multiple">
        <Template Context="DetailMeal">
            <div class="m-0 p-0 pb-1" Style="overflow:auto">
                <MealComponent Meal="@DetailMeal"></MealComponent>
            </div>
            <RadzenDataGrid AllowFiltering="true"
                            AllowColumnResize="true"
                            AllowAlternatingRows="false"
                            FilterMode="FilterMode.Advanced"
                            AllowSorting="true"
                            PageSize="8"
                            AllowPaging="true"
                            PagerHorizontalAlign="HorizontalAlign.Left"
                            ShowPagingSummary="true"
                            Data="@(DetailMeal.SubMeals)"
                            TItem="MealRelation"
                            LogicalFilterOperator="LogicalFilterOperator.Or"
                            ExpandMode="DataGridExpandMode.Multiple">
                <Template Context="data">
                    <div class="m-0 p-0" Style="overflow:auto">
                        <MealRelationComponent Meal="@data"></MealRelationComponent>
                    </div>
                </Template>
                <HeaderTemplate>
                    <span class="rz-color-secondary">Ingredients</span>
                </HeaderTemplate>
                <Columns>
                    <RadzenDataGridColumn TItem="MealRelation" Property="Value.Name" Title="Name">
                        <Template Context="data">
                            @(
                                data.Amount + "g " + data.SubMeal.Name
                                )
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="MealRelation" Title="kcal" Width="85px">
                        <Template Context="data">
                            @(
                                Math.Round(data.Calories, 2)
                                )
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </Template>
        <Columns>
            <RadzenDataGridColumn TItem="Meal" Property="Name" Title="Name" />
            @*<RadzenDataGridColumn TItem="Meal" Property="Calories" Title="kcal" Width="90px" />*@
            <RadzenDataGridColumn TItem="Meal" Title="" Filterable="false" Width="100px" TextAlign="TextAlign.Center">
                <Template Context="data">
                    <RadzenButton Click=@(() => NewMeal(data)) Icon="edit" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Medium" class=" m-0 me-2" />
                    <RadzenButton Click=@(() => RemoveMeal(data)) Icon="delete" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Medium" class=" m-0" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
    <RadzenButton Click=@(args => NewMeal(new Meal() { SubMeals = Enumerable.Empty<MealRelation>() })) Icon="add" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Large" class=" rz-shadow-10 fixed-bottom m-3" />
}
else
{
    if (!ShowEditIngredients)
    {
        <RadzenTemplateForm Data="@EditMeal" Submit="@((Meal args) => SaveMeal())">
            <RadzenStack Gap="1rem">
                <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Left">
                    <RadzenColumn>
                        <RadzenLabel class="rz-color-white me-2" Text="Name" />
                    </RadzenColumn>
                    <RadzenColumn>
                        <RadzenTextBox @bind-Value="@EditMeal.Name" Style="width: 100%;" />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow AlignItems="AlignItems.Center">
                    <RadzenColumn>
                        <RadzenLabel class="rz-color-white" Text="Description" />
                    </RadzenColumn>
                    <RadzenColumn>
                        <RadzenTextBox Style="width: 100%;" @bind-Value="@EditMeal.Description" />
                    </RadzenColumn>
                </RadzenRow>
            </RadzenStack>
            <br>

            <div style="display: flex; justify-content: space-between; gap: 0.3rem;" class="pb-3">
                <RadzenCard class="m-0 px-2 py-0" style="flex: 1;">
                    <RadzenText class="m-0 p-0 rz-cell-data">@(Math.Round(EditMeal.Calories))</RadzenText>
                    <RadzenText class="m-0 p-0" TextStyle="TextStyle.Overline">@("kcal")</RadzenText>
                </RadzenCard>
                <RadzenCard class="m-0 px-2 py-0" style="flex: 1;">
                    <RadzenText class="m-0 p-0 rz-cell-data">@(Math.Round(EditMeal.Carbohydrates) + " g")</RadzenText>
                    <RadzenText class="m-0 p-0" TextStyle="TextStyle.Overline">@("carbs")</RadzenText>
                </RadzenCard>
                <RadzenCard class="m-0 px-2 py-0" style="flex: 1;">
                    <RadzenText class="m-0 p-0 rz-cell-data">@(Math.Round(EditMeal.Fat) + " g")</RadzenText>
                    <RadzenText class="m-0 p-0" TextStyle="TextStyle.Overline">@("fat")</RadzenText>
                </RadzenCard>
                <RadzenCard class="m-0 px-2 py-0" style="flex: 1;">
                    <RadzenText class="m-0 p-0 rz-cell-data">@(Math.Round(EditMeal.Protein) + " g")</RadzenText>
                    <RadzenText class="m-0 p-0" TextStyle="TextStyle.Overline">@("protein")</RadzenText>
                </RadzenCard>
            </div>

            <RadzenDataGrid AllowFiltering="true"
                            AllowColumnResize="true"
                            AllowAlternatingRows="false"
                            FilterMode="FilterMode.Advanced"
                            AllowSorting="true"
                            PageSize="5"
                            AllowPaging="true"
                            PagerHorizontalAlign="HorizontalAlign.Left"
                            ShowPagingSummary="true"
                            Data="@(Enumerable.Range(0, EditMeal.SubMeals.Count()))"
                            TItem="int"
                            LogicalFilterOperator="LogicalFilterOperator.Or"
                            Style="max-height:45vh;overflow:auto"
                            ExpandMode="DataGridExpandMode.Multiple">
                <Template Context="data">
                    @{
                        var mealRel = EditMeal.SubMeals.ToArray().ElementAt(data);
                    }
                    <div class="m-0 p-0" Style="overflow:auto">
                        <MealRelationComponent Meal="@mealRel"></MealRelationComponent>
                    </div>
                </Template>
                <HeaderTemplate>
                    <span class="rz-color-white">Ingredients</span>
                </HeaderTemplate>
                <Columns>

                    <RadzenDataGridColumn TItem="int" Title="Name">
                        <Template Context="data">
                            @{
                                var mealRel = EditMeal.SubMeals.ToArray().ElementAt(data);
                            }
                            @(mealRel.Amount + "g " + mealRel.SubMeal.Name)
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="int" Title="kcal" Width="85px">
                        <Template Context="data">
                            @{
                                var mealRel = EditMeal.SubMeals.ToArray().ElementAt(data);
                            }
                            @(
                        Math.Round(mealRel.Calories, 2)
                        )
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="int" Title="" Filterable="false" Width="50px" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <RadzenButton Click=@(() => RemoveIngredient(data)) Icon="delete" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Medium" class=" m-0" />
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
            <RadzenButton Click=@(() => NewIngredient()) Icon="add" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Large" class=" rz-shadow-10 mt-3 w-100" />


            <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="fixed-bottom m-3">
                <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Large" Icon="cancel" Text="Cancel" class=" rz-shadow-10 w-50" Click="@(() => ShowEdit = !ShowEdit)" />
                <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Large" Icon="save" Text="Save" class=" rz-shadow-10 w-50" Disabled="@(!EditMeal.SubMeals.Any())" />
            </RadzenStack>
        </RadzenTemplateForm>
    }
    else
    {
        if (!ShowEditWeight)
        {
            <RadzenDataGrid AllowFiltering="true"
                            AllowColumnResize="true"
                            AllowAlternatingRows="false"
                            FilterMode="FilterMode.Advanced"
                            AllowSorting="true"
                            PageSize="30"
                            AllowPaging="true"
                            PagerHorizontalAlign="HorizontalAlign.Left"
                            ShowPagingSummary="true"
                            Data="@AllMeals"
                            TItem="Meal"
                            LogicalFilterOperator="LogicalFilterOperator.Or"
                            SelectionMode="DataGridSelectionMode.Single"
                            @bind-Value="SelectedMeals"
                            Style="max-height:80vh;overflow:auto"
                            ExpandMode="DataGridExpandMode.Multiple">
                <Template Context="data">
                    <div class="m-0 p-0" Style="overflow:auto">
                        <MealComponent Meal="@data"></MealComponent>
                    </div>
                </Template>
                <Columns>
                    <RadzenDataGridColumn TItem="Meal" Property="Name" Title="Name" Filterable="true" />
                    <RadzenDataGridColumn TItem="Meal" Property="Calories" Title="kcal" Filterable="true" Width="85px" />
                </Columns>
            </RadzenDataGrid>


            <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="fixed-bottom m-3">
                <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Large" Icon="cancel" Text="Cancel" class=" rz-shadow-10 w-50" Click="@(() => CancelEdit())" />
                <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Large" Icon="done" Text="Next" class=" rz-shadow-10 w-50" Click="@(() => { ShowEditWeight = !ShowEditWeight; EditWeight = (int)SelectedMeals.FirstOrDefault().Weight; })" Disabled="@(SelectedMeals.Count == 0)" />
            </RadzenStack>
        }
        else
        {
            <RadzenRow AlignItems="AlignItems.Center">
                <RadzenColumn>
                    <RadzenLabel class="rz-color-white" Text="Amount in g" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenNumeric Style="width: 100%;" @bind-Value="@(EditWeight)" />
                </RadzenColumn>
            </RadzenRow>

            <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="fixed-bottom m-3">
                <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Large" Icon="cancel" Text="Cancel" class=" rz-shadow-10 w-50" Click="@(() => CancelEdit())" />
                <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Large" Icon="save" Text="Save" class=" rz-shadow-10 w-50" Click="@(() => SaveIngredient())" />
            </RadzenStack>
        }
    }
}

@code {
    private IEnumerable<Meal> Recipes { get; set; } = Enumerable.Empty<Meal>();

    private Meal EditMeal { get; set; }
    private int EditWeight { get; set; }

    private bool ShowEdit { get; set; }
    private bool ShowEditIngredients { get; set; }
    private bool ShowEditWeight { get; set; }

    private IList<Meal> AllMeals { get; set; } = new List<Meal>();
    private IList<Meal> SelectedMeals { get; set; } = new List<Meal>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Recipes = DianabolService.GetRecipes();
    }

    private void NewMeal(Meal meal)
    {
        EditMeal = meal;
        ShowEdit = true;
    }

    private void NewIngredient()
    {
        AllMeals = DianabolService.GetIngredients().ToList();

        EditMeal.SubMeals = EditMeal.SubMeals.ToArray();


        SelectedMeals = new List<Meal>();
        ShowEditIngredients = true;
    }

    private void RemoveMeal(Meal meal)
    {
        try
        {
            DianabolService.RemoveMeal(meal);
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Deletion failed", Detail = ex.Message, Duration = 4000 });
        }

        Recipes = DianabolService.GetRecipes();
    }

    private void RemoveIngredient(int index)
    {
        var subMeals = EditMeal.SubMeals.ToArray();
        EditMeal.SubMeals = Enumerable.Empty<MealRelation>();

        foreach (var i in Enumerable.Range(0, subMeals.Count()))
        {
            if (i != index)
            {
                EditMeal.SubMeals = EditMeal.SubMeals.Append(subMeals.ElementAt(i));
            }
        }
    }

    private void SaveMeal()
    {
        DianabolService.MergeMeal(EditMeal);

        ShowEdit = false;
        Recipes = DianabolService.GetRecipes();
    }

    private void SaveIngredient()
    {
        var subMeal = SelectedMeals.FirstOrDefault() ?? new Meal();

        EditMeal.SubMeals = EditMeal.SubMeals.Append(new MealRelation()
            {
                SubMealId = (int)subMeal.Id,
                RelAmount = EditWeight / subMeal.Weight,
                SubMeal = subMeal
            });

        ShowEditIngredients = false;
        ShowEditWeight = false;
    }

    private void CancelEdit()
    {
        ShowEditIngredients = false;
        ShowEditWeight = false;
        Recipes = DianabolService.GetRecipes();
    }
}
