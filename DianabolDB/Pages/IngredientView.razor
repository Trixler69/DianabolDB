@page "/ingredients"

@inject IDianabolService DianabolService
@inject NotificationService NotificationService

@if (!ShowEdit)
{

    <RadzenDataGrid AllowFiltering="true"
                    AllowColumnResize="true"
                    AllowAlternatingRows="false"
                    FilterMode="FilterMode.Advanced"
                    AllowSorting="true"
                    PageSize="20"
                    AllowPaging="false"
                    PagerHorizontalAlign="HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    Data="@Ingredients"
                    TItem="Meal"
                    LogicalFilterOperator="LogicalFilterOperator.Or"
                    SelectionMode="DataGridSelectionMode.Single"
                    Style="max-height:80vh;overflow:auto"
                    ExpandMode="DataGridExpandMode.Multiple">
        <Template Context="data">
            <div class="m-0 p-0 pb-0" Style="overflow:auto">
                <MealComponent Meal="@data"></MealComponent>
            </div>
        </Template>
        <Columns>
            <RadzenDataGridColumn TItem="Meal" Property="Name" Title="Name" Filterable="true" CssClass="pt-0 pb-0">
                <Template Context="data">
                    <RadzenText class="m-0 p-0 rz-cell-data">@(data.Name)</RadzenText>
                    <RadzenText class="m-0 p-0" TextStyle="TextStyle.Caption">@(Math.Round(data.Weight, 2) + "g")</RadzenText>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Meal" Property="Calories" Title="kcal" Filterable="false" Width="65px">
                <Template Context="data">
                    @(Math.Round(data.Calories, 2))
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Meal" Title="" Filterable="false" Width="100px" TextAlign="TextAlign.Center">
                <Template>
                    <RadzenButton Click=@(() => NewMeal(context)) Icon="edit" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Medium" class=" m-0 me-2" />
                    <RadzenButton Click=@(() => RemoveMeal(context)) Icon="delete" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Medium" class=" m-0" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>

    <RadzenButton Click=@(args => NewMeal(new Meal())) Icon="add" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Large" class=" rz-shadow-10 fixed-bottom m-3 " />

}
else
{
    <RadzenTemplateForm Data="@EditMeal" Submit="@((Meal args) => { SaveMeal(args); })">
        <RadzenStack Gap="1rem">
            <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Left">
                <RadzenColumn>
                    <RadzenLabel class="rz-color-white" Text="Name" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenTextBox @bind-Value="@EditMeal.Name" Style="width: 100%;" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow AlignItems="AlignItems.Center">
                <RadzenColumn>
                    <RadzenLabel class="rz-color-white" Text="Description" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenTextBox Style="width: 100%;" @bind-Value="@EditMeal.Description" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow AlignItems="AlignItems.Center">
                <RadzenColumn>
                    <RadzenLabel Text="Weight (g)" class="rz-color-white" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenNumeric TValue="double" Style="width: 100%;" Value="@EditMeal.Weight" ValueChanged="@((double weight) => OnWeightChange(weight))" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow AlignItems="AlignItems.Center">
                <RadzenColumn>
                    <RadzenLabel Text="Calories (kcal)" class="rz-color-white" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenNumeric Style="width: 100%;" @bind-Value="@EditMeal.Calories" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow AlignItems="AlignItems.Center">
                <RadzenColumn>
                    <RadzenLabel Text="Carbohydrates (g)" class="rz-color-white" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenNumeric Style="width: 100%;" @bind-Value="@EditMeal.Carbohydrates" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow AlignItems="AlignItems.Center">
                <RadzenColumn>
                    <RadzenLabel Text="Fat (g)" class="rz-color-white" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenNumeric Style="width: 100%;" @bind-Value="@EditMeal.Fat" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow AlignItems="AlignItems.Center">
                <RadzenColumn>
                    <RadzenLabel Text="Protein (g)" class="rz-color-white" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenNumeric Style="width: 100%;" @bind-Value="@EditMeal.Protein" />
                </RadzenColumn>
            </RadzenRow>
        </RadzenStack>
        <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="fixed-bottom m-3">
            <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Large" Icon="cancel" Text="Cancel" class=" rz-shadow-10 w-50" Click="@(() => ShowEdit = !ShowEdit)" />
            <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Large" Icon="save" Text="Save" class=" rz-shadow-10 w-50" />
        </RadzenStack>
    </RadzenTemplateForm>
}


@code {
    private IEnumerable<Meal> Ingredients { get; set; }
    private Meal EditMeal { get; set; }
    private bool ShowEdit { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Ingredients = DianabolService.GetIngredients();
    }

    private void NewMeal(Meal meal)
    {
        EditMeal = meal;
        ShowEdit = true;
    }

    private void RemoveMeal(Meal meal)
    {
        try
        {
            DianabolService.RemoveMeal(meal);
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Deletion failed", Detail = ex.Message, Duration = 4000 });
        }

        Ingredients = DianabolService.GetIngredients();
    }

    private void SaveMeal(Meal meal)
    {
        DianabolService.MergeMeal(meal);

        ShowEdit = false;
        Ingredients = DianabolService.GetIngredients();
    }

    private void OnWeightChange(double weight)
    {
        var factor = weight / EditMeal.Weight;
        EditMeal.Weight = weight;
        EditMeal.Calories = EditMeal.Calories * factor;
        EditMeal.Protein = EditMeal.Protein * factor;
        EditMeal.Carbohydrates = EditMeal.Carbohydrates * factor;
        EditMeal.Fat = EditMeal.Fat * factor;
    }
}
