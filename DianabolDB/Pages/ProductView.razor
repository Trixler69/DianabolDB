@page "/products"

@using CommunityToolkit.Maui.Views;
@using DianabolDB.MauiPages;

@inject IDianabolService DianabolService
@inject IOpenFoodFactsService OpenFoodFactsService
@inject NotificationService NotificationService

@if (!ShowEdit)
{
    <RadzenStack Gap="1rem" AlignItems="AlignItems.Stretch" Orientation="Radzen.Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween" class="h-100">
        <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenColumn Size="6">
                <RadzenTextBox @bind-Value="@SearchString" Style="width: 100%;"/>
            </RadzenColumn>
            <RadzenColumn Size="4">
                <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Medium" Icon="search" Text="Search" class=" rz-shadow-10 w-100" Click="@(async () => await SearchProduct())" />
            </RadzenColumn>
            <RadzenColumn Size="2">
                <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Medium" Icon="line_weight" class="rz-shadow-10 w-100" Click="OpenPopup" />
            </RadzenColumn>
        </RadzenRow>



        <RadzenProgressBar Visible="@ShowLoading" Value="100" class=" m-0 p-0" ShowValue="false" Mode="ProgressBarMode.Indeterminate" ProgressBarStyle="ProgressBarStyle.Secondary" />

        <RadzenRow>
            <RadzenDataGrid AllowFiltering="true"
                            AllowColumnResize="true"
                            AllowAlternatingRows="false"
                            FilterMode="FilterMode.Advanced"
                            AllowSorting="true"
                            PageSize="24"
                            AllowPaging="true"
                            PagerHorizontalAlign="HorizontalAlign.Left"
                            ShowPagingSummary="true"
                            Data="@Ingredients"
                            TItem="Meal"
                            LogicalFilterOperator="LogicalFilterOperator.Or"
                            SelectionMode="DataGridSelectionMode.Single"
                            ExpandMode="DataGridExpandMode.Multiple">
                <Template Context="data">
                    <RadzenCard class="m-0 p-2" Style="overflow:auto">
                        <span class="rz-color-secondary">@(data.Name)</span><br>
                        <span class="rz-color-white">@(Math.Round(data.Calories, 2) + " kcal / " + data.Weight + "g")</span><br>
                        <span class="rz-color-white">@(Math.Round(data.Carbohydrates, 2) + "g carbohydrates / " + data.Weight + "g")</span><br>
                        <span class="rz-color-white">@(Math.Round(data.Fat, 2) + "g fat / " + data.Weight + "g")</span><br>
                        <span class="rz-color-white">@(Math.Round(data.Protein, 2) + "g protein / " + data.Weight + "g")</span><br>
                    </RadzenCard>
                </Template>
                <Columns>
                    <RadzenDataGridColumn TItem="Meal" Property="Name" Title="Name" Filterable="true" />
                    @*<RadzenDataGridColumn TItem="Meal" Property="Calories" Title="kcal" Filterable="true" Width="85px" />*@
                    <RadzenDataGridColumn TItem="Meal" Title="" Filterable="false" Width="50px" TextAlign="TextAlign.Center">
                        <Template>
                            <RadzenButton Click=@(() => NewMeal(context)) Icon="add" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Medium" class=" m-0" />
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </RadzenRow>
        @*<span class="fixed-bottom rz-color-secondary">@(Error)</span>*@
    </RadzenStack>


}
else
{
    <RadzenTemplateForm Data="@EditMeal" Submit="@((Meal args) => { SaveMeal(args); })">
        <RadzenStack Gap="1rem">
            <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Left">
                <RadzenColumn>
                    <RadzenLabel class="rz-color-white" Text="Name" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenTextBox @bind-Value="@EditMeal.Name" Style="width: 100%;" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow AlignItems="AlignItems.Center">
                <RadzenColumn>
                    <RadzenLabel class="rz-color-white" Text="Description" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenTextBox Style="width: 100%;" @bind-Value="@EditMeal.Description" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow AlignItems="AlignItems.Center">
                <RadzenColumn>
                    <RadzenLabel Text="Weight (g)" class="rz-color-white" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenNumeric TValue="double" Style="width: 100%;" Value="@EditMeal.Weight" ValueChanged="@((double weight) => OnWeightChange(weight))" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow AlignItems="AlignItems.Center">
                <RadzenColumn>
                    <RadzenLabel Text="Calories (kcal)" class="rz-color-white" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenNumeric Style="width: 100%;" @bind-Value="@EditMeal.Calories" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow AlignItems="AlignItems.Center">
                <RadzenColumn>
                    <RadzenLabel Text="Carbohydrates (g)" class="rz-color-white" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenNumeric Style="width: 100%;" @bind-Value="@EditMeal.Carbohydrates" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow AlignItems="AlignItems.Center">
                <RadzenColumn>
                    <RadzenLabel Text="Fat (g)" class="rz-color-white" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenNumeric Style="width: 100%;" @bind-Value="@EditMeal.Fat" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow AlignItems="AlignItems.Center">
                <RadzenColumn>
                    <RadzenLabel Text="Protein (g)" class="rz-color-white" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenNumeric Style="width: 100%;" @bind-Value="@EditMeal.Protein" />
                </RadzenColumn>
            </RadzenRow>
        </RadzenStack>

        <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="fixed-bottom m-3">
            <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Large" Icon="cancel" Text="Cancel" class=" rz-shadow-10 w-50" Click="@(() => ShowEdit = !ShowEdit)" />
            <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Large" Icon="save" Text="Save" class=" rz-shadow-10 w-50" />
        </RadzenStack>
    </RadzenTemplateForm>
}


@code {
    private IEnumerable<Meal> Ingredients { get; set; }
    private Meal EditMeal { get; set; }
    private bool ShowEdit { get; set; }
    private string SearchString { get; set; }
    private bool ShowLoading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private void NewMeal(Meal meal)
    {
        EditMeal = meal;
        ShowEdit = true;
    }

    private void SaveMeal(Meal meal)
    {
        DianabolService.MergeMeal(meal);
        ShowEdit = false;
    }

    private async Task SearchProduct()
    {

        try
        {
            ShowLoading = true;
            Ingredients = (await OpenFoodFactsService.FetchProductByName(SearchString))?.Products.Select(p => new Meal()
                {
                    Name = p.Brands + " " + p.ProductName,
                    Calories = p.Nutriments.EnergyKcal100g == null ? 0 : (Double)p.Nutriments.EnergyKcal100g,
                    Carbohydrates = p.Nutriments.Carbohydrates100g == null ? 0 : (Double)p.Nutriments.Carbohydrates100g,
                    Fat = p.Nutriments.Fat100g == null ? 0 : (Double)p.Nutriments.Fat100g,
                    Weight = 100,
                    Protein = p.Nutriments.Proteins100g == null ? 0 : (Double)p.Nutriments.Proteins100g
                });
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Product loading failed", Detail = ex.Message, Duration = 4000 });
        }
        ShowLoading = false;
    }

    private void OnWeightChange(double weight)
    {
        var factor = weight / EditMeal.Weight;
        EditMeal.Weight = weight;
        EditMeal.Calories = EditMeal.Calories * factor;
        EditMeal.Protein = EditMeal.Protein * factor;
        EditMeal.Carbohydrates = EditMeal.Carbohydrates * factor;
        EditMeal.Fat = EditMeal.Fat * factor;
    }

    private async void OpenPopup()
    {
        string code = "";
        var popupPage = new MauiPopupPage()
            {
                CanBeDismissedByTappingOutsideOfPopup = false
            };

        var result = await App.Current.MainPage.ShowPopupAsync(popupPage);

        if(result != null)
        {
            code = result?.ToString();
        }
        else
        {
            return;
        }

        try
        {
            var productapi = (await OpenFoodFactsService.FetchProductByCode(code))?.Product;
            var product = new Meal()
                {
                    Name = productapi.Brands + " " + productapi.ProductName,
                    Calories = productapi.Nutriments.EnergyKcal100g == null ? 0 : (Double)productapi.Nutriments.EnergyKcal100g,
                    Carbohydrates = productapi.Nutriments.Carbohydrates100g == null ? 0 : (Double)productapi.Nutriments.Carbohydrates100g,
                    Fat = productapi.Nutriments.Fat100g == null ? 0 : (Double)productapi.Nutriments.Fat100g,
                    Weight = 100,
                    Protein = productapi.Nutriments.Proteins100g == null ? 0 : (Double)productapi.Nutriments.Proteins100g
                };
            NewMeal(product);
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Product loading failed", Detail = ex.Message, Duration = 4000 });
        }

        StateHasChanged();
    }
}
