@page "/"

@using DianabolDB.Data
@using DianabolDB.Service
@inject DianabolService DianabolService
@inject DialogService DialogService


@if (!ShowEdit)
{
    if (!ShowEditBodyWeight)
    {
        <RadzenStack Gap="1rem" AlignItems="AlignItems.Stretch" Orientation="Radzen.Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween" class="h-100 pb-3">
            <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                <RadzenColumn>
                    <div class="rz-text-align-left w-100">
                        <RadzenDatePicker Style="width:100%" DateFormat="dd/MM/yyyy" ShowTime="false" TValue="DateTime?" @bind-Value="@SelectedDate" Change="@(() => OnDateChanged())" />
                    </div>
                </RadzenColumn>
                <RadzenColumn Size="4">
                    <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Medium" Icon="edit" Text="@(Math.Round(SelectedDay.Weight == null ? 0 : (decimal)SelectedDay.Weight,1).ToString()+" kg")" class="rz-shadow-10 w-100" Click="@(() => ShowEditBodyWeight=true)">

                    </RadzenButton>
                </RadzenColumn>
            </RadzenRow>
        </RadzenStack>
        <RadzenCard class="rz-background-color-secondary-light p-0 m-0 p-1 mb-2">
            <RadzenRow AlignItems="AlignItems.Center" Orientation="Radzen.Orientation.Vertical" JustifyContent="JustifyContent.SpaceEvenly" Gap="0.2rem">
                <RadzenCard class="m-0 px-2 py-1" Style="width:23%">
                    <RadzenText class="m-0 p-0" TextStyle="TextStyle.H6">@(Math.Round(SelectedDay.Calories))</RadzenText>
                        <RadzenText class="m-0 p-0" TextStyle="TextStyle.Overline">@("kcal")</RadzenText>
                    </RadzenCard>
                    <RadzenCard class="m-0 px-2 py-1" Style="width:23%">
                        <RadzenText class="m-0 p-0" TextStyle="TextStyle.H6">@(Math.Round(SelectedDay.Carbohydrates) + " g")</RadzenText>
                        <RadzenText class="m-0 p-0" TextStyle="TextStyle.Overline">@("carbs")</RadzenText>
                    </RadzenCard>
                    <RadzenCard class="m-0 px-2 py-1" Style="width:23%">
                        <RadzenText class="m-0 p-0" TextStyle="TextStyle.H6">@(Math.Round(SelectedDay.Fat) + " g")</RadzenText>
                        <RadzenText class="m-0 p-0" TextStyle="TextStyle.Overline">@("fat")</RadzenText>
                    </RadzenCard>
                    <RadzenCard class="m-0 px-2 py-1" Style="width:23%">
                        <RadzenText class="m-0 p-0" TextStyle="TextStyle.H6">@(Math.Round(SelectedDay.Protein) + " g")</RadzenText>
                        <RadzenText class="m-0 p-0" TextStyle="TextStyle.Overline">@("protein")</RadzenText>
                    </RadzenCard>
                </RadzenRow>
            </RadzenCard>
        <RadzenDataGrid AllowFiltering="true"
                AllowColumnResize="true"
                AllowAlternatingRows="false"
                FilterMode="FilterMode.Advanced"
                AllowSorting="true" PageSize="8"
                AllowPaging="false" PagerHorizontalAlign="HorizontalAlign.Left"
                Data="@(SelectedDay == null ? new List<KeyValuePair<int,KeyValuePair<int, Meal>>>() : SelectedDay.MealObjects)"
                TItem="KeyValuePair<int,KeyValuePair<int, Meal>>"
                LogicalFilterOperator="LogicalFilterOperator.Or"
                Style="max-height:70vh;overflow:auto"
                ExpandMode="DataGridExpandMode.Multiple">
            <Template Context="data">
                <RadzenCard class="m-0 p-2" Style="overflow:auto">
                    <span class="rz-color-secondary">@(data.Value.Value.Name)</span><br>
                    <span class="rz-color-white">@(Math.Round(data.Value.Value.Calories / data.Value.Value.Weight * data.Value.Key, 2) + " kcal")</span><br>
                    <span class="rz-color-white">@(Math.Round(data.Value.Value.Carbohydrates / data.Value.Value.Weight * data.Value.Key, 2) + " g carbohydrates")</span><br>
                    <span class="rz-color-white">@(Math.Round(data.Value.Value.Fat / data.Value.Value.Weight * data.Value.Key, 2) + " g fat")</span><br>
                    <span class="rz-color-white">@(Math.Round(data.Value.Value.Protein / data.Value.Value.Weight * data.Value.Key, 2) + " g protein")</span><br>
                </RadzenCard>
            </Template>
            @*        <HeaderTemplate>
    <span class="rz-color-secondary">Meals</span>
    </HeaderTemplate>*@
            <Columns>
                <RadzenDataGridColumn TItem="KeyValuePair<int,KeyValuePair<int, Meal>>" Property="Value.Value.Name" Title="Name">
                    <Template Context="data">
                        @(data.Value.Key + "g " + data.Value.Value.Name)

                    </Template>
                </RadzenDataGridColumn>

                @*<RadzenDataGridColumn TItem="KeyValuePair<int,KeyValuePair<int, Meal>>" Title="kcal" Width="85px">
        <Template Context="data">
        @(data.Value.Key * data.Value.Value.Calories / data.Value.Value.Weight)
        </Template>
        </RadzenDataGridColumn>*@
                <RadzenDataGridColumn TItem="KeyValuePair<int,KeyValuePair<int, Meal>>" Title="" Filterable="false" Width="50px" TextAlign="TextAlign.Center">
                    <Template>
                        <RadzenButton Click=@(() => RemoveMeal(context.Key)) Icon="delete" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Small" class="rz-border-radius-0 m-0" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>


        <RadzenButton Click=@(() => NewMeal()) Icon="add" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Large" class="rz-border-radius-0 rz-shadow-10 m-3 fixed-bottom" />
    }
    else if (ShowEditBodyWeight)
    {
        <RadzenStack Orientation="Radzen.Orientation.Vertical" JustifyContent="JustifyContent.Center" Gap="1rem" class="m-3">
            <RadzenRow AlignItems="AlignItems.Center">
                <RadzenColumn>
                    <RadzenLabel class="rz-color-white" Text="Bodyweight (kg)" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenNumeric Style="width: 100%;" Name="Weight" @bind-Value="@(SelectedDay.Weight)" Min="0" Max="1000" />
                </RadzenColumn>
            </RadzenRow>

            <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="fixed-bottom m-3">
                <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Large" Icon="cancel" Text="Cancel" class="rz-border-radius-0 rz-shadow-10 w-50" Click="@(() => CancelEdit())" />
                <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Large" Icon="done" Text="Next" class="rz-border-radius-0 rz-shadow-10 w-50" Click="@(async () => {
                            await DianabolService.MergeDay(SelectedDay);
                            OnDateChanged();
                            ShowEditBodyWeight = false;
                        })" />
            </RadzenStack>
        </RadzenStack>
    }
}
else if (ShowEdit)
{
    if (!ShowEditWeight)
    {
        <RadzenDataGrid AllowFiltering="true"
                AllowColumnResize="true"
                AllowAlternatingRows="false"
                FilterMode="FilterMode.Advanced"
                AllowSorting="true"
                PageSize="10"
                AllowPaging="false"
                PagerHorizontalAlign="HorizontalAlign.Left"
                ShowPagingSummary="true"
                Data="@AllMeals"
                TItem="KeyValuePair<int,KeyValuePair<int, Meal>>"
                LogicalFilterOperator="LogicalFilterOperator.Or"
                SelectionMode="DataGridSelectionMode.Single"
                @bind-Value="SelectedMeals"
                Style="max-height:70vh;overflow:auto"
                ExpandMode="DataGridExpandMode.Multiple">
            <Template Context="data">
                <RadzenCard class="m-0 p-2" Style="overflow:auto">
                    <span class="rz-color-secondary">@(data.Value.Value.Name)</span><br>
                    <span class="rz-color-white">@(data.Value.Value.Calories + " kcal / " + data.Value.Value.Weight + "g")</span><br>
                    <span class="rz-color-white">@(data.Value.Value.Carbohydrates + " g carbohydrates / " + data.Value.Value.Weight + "g")</span><br>
                    <span class="rz-color-white">@(data.Value.Value.Fat + " g fat / " + data.Value.Value.Weight + "g")</span><br>
                    <span class="rz-color-white">@(data.Value.Value.Protein + " g protein / " + data.Value.Value.Weight + "g")</span><br>
                </RadzenCard>
            </Template>
            <Columns>
                <RadzenDataGridColumn TItem="KeyValuePair<int,KeyValuePair<int, Meal>>" Property="Value.Value.Name" Title="Name" Filterable="true" />
                <RadzenDataGridColumn TItem="KeyValuePair<int,KeyValuePair<int, Meal>>" Property="Value.Value.Calories" Title="kcal" Filterable="true" Width="85px" />
            </Columns>
        </RadzenDataGrid>


        <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="fixed-bottom m-3">
            <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Large" Icon="cancel" Text="Cancel" class="rz-border-radius-0 rz-shadow-10 w-50" Click="@(() => CancelEdit())" />
            <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Large" Icon="done" Text="Next" class="rz-border-radius-0 rz-shadow-10 w-50" Click="@(() => { ShowEditWeight = !ShowEditWeight; EditWeight = SelectedMeals.FirstOrDefault().Value.Key; })" Disabled="@(SelectedMeals.Count == 0)" />
        </RadzenStack>
    }
    else
    {
        <RadzenRow AlignItems="AlignItems.Center">
            <RadzenColumn>
                <RadzenLabel class="rz-color-white" Text="Amount in g" />
            </RadzenColumn>
            <RadzenColumn>
                <RadzenNumeric Style="width: 100%;" @bind-Value="@(EditWeight)" />
            </RadzenColumn>
        </RadzenRow>

        <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="fixed-bottom m-3">
            <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Large" Icon="cancel" Text="Cancel" class="rz-border-radius-0 rz-shadow-10 w-50" Click="@(() => CancelEdit())" />
            <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Large" Icon="save" Text="Save" class="rz-border-radius-0 rz-shadow-10 w-50" Click="@(() => SaveDay())" />
        </RadzenStack>
    }
}


@code {
    private DateTime? SelectedDate { get; set; } = DateTime.Today;
    private IEnumerable<Day> Days { get; set; }
    private Day SelectedDay { get; set; }
    private Day EditDay { get; set; }
    private bool ShowEdit { get; set; }
    private bool ShowEditWeight { get; set; }
    private bool ShowEditBodyWeight { get; set; }
    private int EditWeight { get; set; }
    private IList<KeyValuePair<int, KeyValuePair<int, Meal>>> AllMeals { get; set; }
    private IList<KeyValuePair<int, KeyValuePair<int, Meal>>> SelectedMeals { get; set; }
    private Random Random = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        OnDateChanged();
    }

    private async void OnDateChanged()
    {
        Days = await DianabolService.GetDaysAsync();

        if (Days.Count() != 0)
        {
            SelectedDay = Days.FirstOrDefault(x => x.Date.Date == SelectedDate.Value.Date);
        }

        SelectedDay = SelectedDay == null ? new Day() { Date = (DateTime)SelectedDate } : SelectedDay;

        if (Days.Count() != 0)
        {
            SelectedDay.Weight = SelectedDay.Weight == null ? (Days.FirstOrDefault(x => x.Id == Days.Max(d => d.Id)).Weight) : SelectedDay.Weight;
        }

    }

    private async Task NewMeal()
    {
        AllMeals = (await DianabolService.GetMealsAsync()).Select(m => new KeyValuePair<int, KeyValuePair<int, Meal>>(Random.Next(), new KeyValuePair<int, Meal>(m.Weight, m))).ToList();
        EditDay = SelectedDay == null ? new Day() { Date = (DateTime)SelectedDate } : SelectedDay;
        SelectedMeals = new List<KeyValuePair<int, KeyValuePair<int, Meal>>>();
        ShowEdit = true;
    }

    private async Task RemoveMeal(int id)
    {
        SelectedDay.Meals = SelectedDay.Meals.Where(d => d.Key != id);

        await DianabolService.MergeDay(SelectedDay);

        Days = await DianabolService.GetDaysAsync();
        SelectedDay = Days.FirstOrDefault(x => x.Date.Date == SelectedDate.Value.Date);
    }

    private async Task SaveDay()
    {
        EditDay.Meals = EditDay.Meals.Append(new KeyValuePair<int, KeyValuePair<int, int>>(Random.Next(), new KeyValuePair<int, int>(EditWeight, (int)SelectedMeals.FirstOrDefault().Value.Value.Id)));

        await DianabolService.MergeDay(EditDay);

        ShowEdit = false;
        ShowEditWeight = false;
        Days = await DianabolService.GetDaysAsync();
        SelectedDay = Days.FirstOrDefault(x => x.Date.Date == SelectedDate.Value.Date);
    }

    private void CancelEdit()
    {
        ShowEdit = false;
        ShowEditWeight = false;
        ShowEditBodyWeight = false;

        OnDateChanged();
    }
}