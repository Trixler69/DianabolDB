@page "/"

@inject IDianabolService DianabolService
@inject DialogService DialogService


@if (!ShowEdit)
{
    if (!ShowEditBodyWeight)
    {
        <RadzenStack Gap="1rem" AlignItems="AlignItems.Stretch" Orientation="Radzen.Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween" class="h-100 pb-4">
            <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                <RadzenColumn>
                    <div class="rz-text-align-left w-100">
                        <RadzenDatePicker Style="width:100%; border-radius:0;" class="" DateFormat="dd/MM/yyyy" ShowTime="false" TValue="DateTime?" @bind-Value="@SelectedDate" Change="@(() => OnDateChanged())" />
                    </div>
                </RadzenColumn>
                <RadzenColumn Size="4">
                    <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Medium" Icon="edit" Text="@(Math.Round(SelectedDay.BodyWeight == null ? 0 : (decimal)SelectedDay.BodyWeight,1).ToString()+" kg")" class="rz-shadow-10 w-100 " Click="@(() => ShowEditBodyWeight=true)">

                    </RadzenButton>
                </RadzenColumn>
            </RadzenRow>
        </RadzenStack>

        <RadzenCard class="rz-background-color-secondary-light p-0 m-0 p-1 mb-4 ">
            <div style="display: flex; justify-content: space-between; gap: 0.3rem;">
                <RadzenCard class="m-0 px-2 py-1 " style="flex: 1;">
                    <RadzenText class="m-0 p-0" TextStyle="TextStyle.H6">@(Math.Round(SelectedDay.Calories))</RadzenText>
                    <RadzenText class="m-0 p-0" TextStyle="TextStyle.Overline">@("kcal")</RadzenText>
                </RadzenCard>
                <RadzenCard class="m-0 px-2 py-1 " style="flex: 1;">
                    <RadzenText class="m-0 p-0" TextStyle="TextStyle.H6">@(Math.Round(SelectedDay.Carbohydrates) + " g")</RadzenText>
                    <RadzenText class="m-0 p-0" TextStyle="TextStyle.Overline">@("carbs")</RadzenText>
                </RadzenCard>
                <RadzenCard class="m-0 px-2 py-1 " style="flex: 1;">
                    <RadzenText class="m-0 p-0" TextStyle="TextStyle.H6">@(Math.Round(SelectedDay.Fat) + " g")</RadzenText>
                    <RadzenText class="m-0 p-0" TextStyle="TextStyle.Overline">@("fat")</RadzenText>
                </RadzenCard>
                <RadzenCard class="m-0 px-2 py-1 " style="flex: 1;">
                    <RadzenText class="m-0 p-0" TextStyle="TextStyle.H6">@(Math.Round(SelectedDay.Protein) + " g")</RadzenText>
                    <RadzenText class="m-0 p-0" TextStyle="TextStyle.Overline">@("protein")</RadzenText>
                </RadzenCard>
            </div>
        </RadzenCard>

        <RadzenDataGrid AllowFiltering="true"
                        AllowColumnResize="true"
                        AllowAlternatingRows="false"
                        FilterMode="FilterMode.Advanced"
                        AllowSorting="true" PageSize="8"
                        AllowPaging="false" PagerHorizontalAlign="HorizontalAlign.Left"
                        Data="@(SelectedDay.Meals)"
                        TItem="DayRelation"
                        LogicalFilterOperator="LogicalFilterOperator.Or"
                        Style="max-height:60vh;overflow:auto"
                        ExpandMode="DataGridExpandMode.Multiple">
            <Template Context="data">
                <RadzenCard class="m-0 p-2" Style="overflow:auto">
                    <span class="rz-color-secondary">@(data.Meal.Name)</span><br>
                    <span class="rz-color-white">@(Math.Round(data.Calories, 2) + " kcal")</span><br>
                    <span class="rz-color-white">@(Math.Round(data.Carbohydrates, 2) + "g carbohydrates")</span><br>
                    <span class="rz-color-white">@(Math.Round(data.Fat, 2) + "g fat")</span><br>
                    <span class="rz-color-white">@(Math.Round(data.Protein, 2) + "g protein")</span><br>
                </RadzenCard>
            </Template>
            <Columns>
                <RadzenDataGridColumn TItem="DayRelation" Property="Meal.Name" Title="Name">
                    <Template Context="data">
                        @(data.Amount + "g " + data.Meal.Name)
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="DayRelation" Title="" Filterable="false" Width="50px" TextAlign="TextAlign.Center">
                    <Template Context="data">
                        <RadzenButton Click=@(() => RemoveMeal(data)) Icon="delete" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Small" class=" m-0" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>


        <RadzenButton Click=@(() => NewMeal()) Icon="add" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Large" class="rz-shadow-10 m-3 fixed-bottom" />
    }
    else if (ShowEditBodyWeight)
    {
        <RadzenStack Orientation="Radzen.Orientation.Vertical" JustifyContent="JustifyContent.Center" Gap="1rem" class="m-3">
            <RadzenRow AlignItems="AlignItems.Center">
                <RadzenColumn>
                    <RadzenLabel class="rz-color-white" Text="Bodyweight (kg)" />
                </RadzenColumn>
                <RadzenColumn>
                    <RadzenNumeric Style="width: 100%;" Name="Weight" @bind-Value="@(SelectedDay.BodyWeight)" Min="0" Max="1000" />
                </RadzenColumn>
            </RadzenRow>

            <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="fixed-bottom m-3">
                <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Large" Icon="cancel" Text="Cancel" class=" rz-shadow-10 w-50" Click="@(() => CancelEdit())" />
                <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Large" Icon="save" Text="Save" class=" rz-shadow-10 w-50" Click="@(() => SaveBodyWeight())" />
            </RadzenStack>
        </RadzenStack>
    }
}
else if (ShowEdit)
{
    if (!ShowEditWeight)
    {
        <RadzenDataGrid AllowFiltering="true"
                        AllowColumnResize="true"
                        AllowAlternatingRows="false"
                        FilterMode="FilterMode.Advanced"
                        AllowSorting="true"
                        PageSize="10"
                        AllowPaging="false"
                        PagerHorizontalAlign="HorizontalAlign.Left"
                        ShowPagingSummary="true"
                        Data="@AllMeals"
                        TItem="Meal"
                        LogicalFilterOperator="LogicalFilterOperator.Or"
                        SelectionMode="DataGridSelectionMode.Single"
                        @bind-Value="SelectedMeals"
                        Style="max-height:70vh;overflow:auto"
                        ExpandMode="DataGridExpandMode.Multiple">
            <Template Context="data">
                <RadzenCard class="m-0 p-2" Style="overflow:auto">
                    <span class="rz-color-secondary">@(data.Name)</span><br>
                    <span class="rz-color-white">@(Math.Round(data.Calories, 2) + " kcal / " + data.Weight + "g")</span><br>
                    <span class="rz-color-white">@(Math.Round(data.Carbohydrates, 2) + "g carbohydrates / " + data.Weight + "g")</span><br>
                    <span class="rz-color-white">@(Math.Round(data.Fat, 2) + "g fat / " + data.Weight + "g")</span><br>
                    <span class="rz-color-white">@(Math.Round(data.Protein, 2) + "g protein / " + data.Weight + "g")</span><br>
                </RadzenCard>
            </Template>
            <Columns>
                <RadzenDataGridColumn TItem="Meal" Property="Name" Title="Name" Filterable="true" />
                <RadzenDataGridColumn TItem="Meal" Property="Calories" Title="kcal" Filterable="true" Width="85px" />
            </Columns>
        </RadzenDataGrid>


        <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="fixed-bottom m-3">
            <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Large" Icon="cancel" Text="Cancel" class=" rz-shadow-10 w-50" Click="@(() => CancelEdit())" />
            <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Large" Icon="done" Text="Next" class=" rz-shadow-10 w-50" Click="@(() => { ShowEditWeight = !ShowEditWeight; EditWeight = (int)SelectedMeals.FirstOrDefault().Weight; })" Disabled="@(SelectedMeals.Count == 0)" />
        </RadzenStack>
    }
    else
    {
        <RadzenRow AlignItems="AlignItems.Center">
            <RadzenColumn>
                <RadzenLabel class="rz-color-white" Text="Amount in g" />
            </RadzenColumn>
            <RadzenColumn>
                <RadzenNumeric Style="width: 100%;" @bind-Value="@(EditWeight)" />
            </RadzenColumn>
        </RadzenRow>

        <RadzenStack Orientation="Radzen.Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="fixed-bottom m-3">
            <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Large" Icon="cancel" Text="Cancel" class=" rz-shadow-10 w-50" Click="@(() => CancelEdit())" />
            <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Large" Icon="save" Text="Save" class=" rz-shadow-10 w-50" Click="@(() => SaveDay())" />
        </RadzenStack>
    }
}


@code {
    private DateTime? SelectedDate { get; set; } = DateTime.Today;
    private IEnumerable<Day> Days { get; set; } = default!;

    private Day? SelectedDay { get; set; } 
    private Day EditDay { get; set; } = default!;

    private bool ShowEdit { get; set; }
    private bool ShowEditWeight { get; set; }
    private bool ShowEditBodyWeight { get; set; }

    private int EditWeight { get; set; }

    private IList<Meal> AllMeals { get; set; } = default!;
    private IList<Meal> SelectedMeals { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        OnDateChanged();
    }

    private void OnDateChanged()
    {
        Days = DianabolService.GetDays();

        if (Days.Any())
        {
            SelectedDay = Days.FirstOrDefault(d => d.Date == SelectedDate.Value.Date);
        }

        SelectedDay = SelectedDay == null ? new Day() { Date = (DateTime)SelectedDate } : SelectedDay;

        if (Days.Any())
        {
            var lastWeight = (Days.FirstOrDefault(x => x.Id == Days.Max(d => d.Id))).BodyWeight;

            SelectedDay.BodyWeight = SelectedDay.BodyWeight == null ? lastWeight : SelectedDay.BodyWeight;
        }
    }

    private void NewMeal()
    {
        AllMeals = DianabolService.GetMeals().ToList();

        SelectedMeals = new List<Meal>();

        ShowEdit = true;
    }

    private void RemoveMeal(DayRelation dayRelation)
    {
        DianabolService.RemoveDayRelation(dayRelation);

        OnDateChanged();
    }

    private void SaveDay()
    {
        DianabolService.MergeDay(SelectedDay);

        var meal = SelectedMeals.FirstOrDefault();

        DianabolService.MergeDayRelation(new DayRelation()
            {
                MealId = (int)meal.Id,
                RelAmount = EditWeight/meal.Weight,
                DayId = SelectedDay.Id,
                Meal = meal
            });

        ShowEdit = false;
        ShowEditWeight = false;

        OnDateChanged();
    }

    private void SaveBodyWeight()
    {
        DianabolService.MergeDay(SelectedDay);
        OnDateChanged();

        ShowEditBodyWeight = false;
    }

    private void CancelEdit()
    {
        ShowEdit = false;
        ShowEditWeight = false;
        ShowEditBodyWeight = false;

        OnDateChanged();
    }
}