@page "/analysis"

@inject IDianabolService DianabolService
@inject NotificationService NotificationService

<RadzenProgressBar Visible="@ShowLoading" Value="100" class=" m-0 p-0" ShowValue="false" Mode="ProgressBarMode.Indeterminate" ProgressBarStyle="ProgressBarStyle.Secondary" />

@if (Days.Any())
{
    <RadzenChart Style="color:white">
    <RadzenLineSeries Data="@Days" CategoryProperty="Date" LineType="LineType.Dashed" ValueProperty="Calories" Title="Calories">
        <RadzenMarkers MarkerType="MarkerType.Circle" />
    </RadzenLineSeries>
    <RadzenValueAxis Min="0" Max="@(Days.Max(d => d.Calories))" Step="500">
        <RadzenGridLines Visible="true" />
    </RadzenValueAxis>
    <RadzenLegend Position="LegendPosition.Bottom" />
</RadzenChart>

<RadzenChart Style="color:white">
    <RadzenLineSeries Data="@Days" CategoryProperty="Date" LineType="LineType.Dashed" ValueProperty="BodyWeight" Title="Weight">
        <RadzenMarkers MarkerType="MarkerType.Circle" />
    </RadzenLineSeries>
    <RadzenValueAxis Min="0" Max="@(Days.Max(d => d.BodyWeight))" Step="5">
        <RadzenGridLines Visible="true" />
    </RadzenValueAxis>
    <RadzenLegend Position="LegendPosition.Bottom" />
</RadzenChart>

<RadzenChart Style="color:white">
    <RadzenLineSeries Data="@Days" CategoryProperty="Date" LineType="LineType.Dashed" ValueProperty="Protein" Title="Protein"><RadzenMarkers MarkerType="MarkerType.Circle" /></RadzenLineSeries>
    <RadzenLineSeries Data="@Days" CategoryProperty="Date" LineType="LineType.Dashed" ValueProperty="Fat" Title="Fat"><RadzenMarkers MarkerType="MarkerType.Circle" /></RadzenLineSeries>
    <RadzenLineSeries Data="@Days" CategoryProperty="Date" LineType="LineType.Dashed" ValueProperty="Carbohydrates" Title="Carbohydrates"><RadzenMarkers MarkerType="MarkerType.Circle" /></RadzenLineSeries>
    <RadzenValueAxis Min="0" Max="@((new List<double>(){Days.Max(d => d.Protein), Days.Max(d => d.Fat), Days.Max(d => d.Carbohydrates)}).Max())" Step="50">
        <RadzenGridLines Visible="true" />
    </RadzenValueAxis>
    <RadzenLegend Position="LegendPosition.Bottom" />
</RadzenChart>

<br />
<br />

<RadzenDataGrid AllowFiltering="true"
                AllowColumnResize="true"
                AllowAlternatingRows="false"
                FilterMode="FilterMode.Advanced"
                AllowSorting="true"
                PageSize="10"
                AllowPaging="false"
                PagerHorizontalAlign="HorizontalAlign.Left"
                ShowPagingSummary="true"
                Data="@Days"
                TItem="Day"
                LogicalFilterOperator="LogicalFilterOperator.Or"
                SelectionMode="DataGridSelectionMode.Single"
                ExpandMode="DataGridExpandMode.Multiple">
    <Template Context="data">
        <RadzenCard class="m-0 p-2" Style="overflow:auto">
            <span class="rz-color-white">@(Math.Round(data.Carbohydrates, 2) + " g carbohydrates")</span><br>
            <span class="rz-color-white">@(Math.Round(data.Fat, 2) + " g fat")</span><br>
            <span class="rz-color-white">@(Math.Round(data.Protein, 2) + " g protein")</span><br>
        </RadzenCard>
    </Template>
    <Columns>
        <RadzenDataGridColumn TItem="Day" Property="Date" Title="Date" Filterable="true" />
        <RadzenDataGridColumn TItem="Day" Property="Calories" Title="kcal" Filterable="true" />
        <RadzenDataGridColumn TItem="Day" Property="BodyWeight" Title="weight" Filterable="true" />
    </Columns>
    </RadzenDataGrid>
}
else
{
    <RadzenText class="m-0 p-0 rz-cell-data">no data yet</RadzenText>
}

@code {
    private IEnumerable<Day> Days { get; set; } = Enumerable.Empty<Day>();
    private bool ShowLoading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        ShowLoading = true;
        Days = DianabolService.GetDays();
        Days.Where(d => d.BodyWeight == null).ToList().ForEach(d => d.BodyWeight = 0);
        ShowLoading = false;
    }

}

